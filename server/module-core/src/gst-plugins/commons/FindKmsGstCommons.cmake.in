# - Try to find KmsGstCommons library

#=============================================================================
# Copyright 2014 Kurento
#
#=============================================================================

set(PACKAGE_VERSION "@PROJECT_VERSION@")
set(KmsGstCommons_VERSION ${PACKAGE_VERSION})



# Include directories
# ===================

find_path(KmsGstCommons_INCLUDE_DIR
  NAMES
    @FIND_HEADERS@
  PATH_SUFFIXES
    src/gst-plugins
    @CUSTOM_PREFIX@
)

set(GST_COMMONS_BINARY_DIR_PREFIX
  "build"
  CACHE PATH "Path prefix used to look for binary files"
)

if(TARGET kmsgstcommons)
  set(KmsGstCommons_GENERATED_INCLUDE_DIR
    "${GST_COMMONS_BINARY_DIR_PREFIX}/src/gst-plugins"
  )
else()
  find_path(KmsGstCommons_GENERATED_INCLUDE_DIR
    NAMES
      commons/kms-core-marshal.h
      commons/kms-core-enumtypes.h
    PATH_SUFFIXES
      ${GST_COMMONS_BINARY_DIR_PREFIX}/src/gst-plugins
      @CUSTOM_PREFIX@
  )
endif()

set(KmsGstCommons_INCLUDE_DIRS
  ${KmsGstCommons_INCLUDE_DIR}
  ${KmsGstCommons_GENERATED_INCLUDE_DIR}
  CACHE INTERNAL "Include directories for KmsGstCommons library" FORCE
)



# Path to library
# ===============

if(TARGET kmsgstcommons)
  #Just get the target for the library
  set(KmsGstCommons_LIBRARY kmsgstcommons)
else()
  find_library(KmsGstCommons_LIBRARY
    NAMES
      kmsgstcommons
    PATH_SUFFIXES
      ${GST_COMMONS_BINARY_DIR_PREFIX}/src/gst-plugins/commons
  )
endif()

set(KmsGstCommons_LIBRARIES
  ${KmsGstCommons_LIBRARY}
  CACHE INTERNAL "Libraries for KmsGstCommons" FORCE
)



# Output variables
# ================

include(GenericFind)

set(REQUIRED_LIBS "@REQUIRED_LIBS@")
foreach(LIB ${REQUIRED_LIBS})
  string(FIND ${LIB} " " POS)

  if(${POS} GREATER 0)
    string(SUBSTRING ${LIB} 0 ${POS} LIB_NAME)
    string(SUBSTRING ${LIB} ${POS} -1 LIB_VERSION)
    string(STRIP ${LIB_NAME} LIB_NAME)
    string(STRIP ${LIB_VERSION} LIB_VERSION)
    generic_find(LIBNAME ${LIB_NAME} REQUIRED VERSION "${LIB_VERSION}")
  else()
    generic_find(LIBNAME ${LIB_NAME} REQUIRED)
  endif()

  list(APPEND REQUIRED_LIBRARIES ${${LIB_NAME}_LIBRARIES})
  list(APPEND REQUIRED_INCLUDE_DIRS ${${LIB_NAME}_INCLUDE_DIRS})
endforeach()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(KmsGstCommons
  FOUND_VAR
    KmsGstCommons_FOUND
  REQUIRED_VARS
    KmsGstCommons_VERSION
    KmsGstCommons_INCLUDE_DIR
    KmsGstCommons_GENERATED_INCLUDE_DIR
    KmsGstCommons_INCLUDE_DIRS
    KmsGstCommons_LIBRARY
    KmsGstCommons_LIBRARIES
  VERSION_VAR
    KmsGstCommons_VERSION
)

mark_as_advanced(
  KmsGstCommons_FOUND
  KmsGstCommons_VERSION
  KmsGstCommons_INCLUDE_DIR
  KmsGstCommons_GENERATED_INCLUDE_DIR
  KmsGstCommons_INCLUDE_DIRS
  KmsGstCommons_LIBRARY
  KmsGstCommons_LIBRARIES
)



# Log lookup result
# =================

get_filename_component(CURRENT_FILE ${CMAKE_CURRENT_LIST_FILE} NAME)

if(KmsGstCommons_FOUND)
  message(STATUS "[${CURRENT_FILE}] Found: ${KmsGstCommons_LIBRARY}")
else()
  message(STATUS "[${CURRENT_FILE}] Not found")
endif()
